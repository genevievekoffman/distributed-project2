Tsige & Genevieve Project 2 Design


>>can you complete: expected_pkt(line 48)



We are implementing the Lamport Timestamp protocol. This means that we stamp every packet(message) a processor sends, so every message/packet has a unique Lamport Timestamp. Our LTS is made of the counter and the process ID (we call this the machine_index) and an index (we call it packet_index). 

Our message types(structs):
    1. data_pkt
    2. feedback_pkt

    >>both message types contain a header
    header:
        -tag (int): tag indicates the type of packet (0 = data packet, 1 = nack, 2 = final packet)
        -machine_index (int): the index of the process that created this packet 

    data_pkt:
        -header
        -packet_index (int): the number of messages sent by this machine_index when created (not including re sent messages) 
        -counter (int): the number of messages sent in the server when packet was created, according to the machine who created it
        -random_num (int): picked at time of creation, random number in range 1 - 1 million
        -payload (array): 1400 bytes of garbage data

    feedback_pkt:
        -header
        -acks_array: (array of ints) an index correlates to a machine; values are the last packet_index written into their file
        -nacks: (2d array of integers) every column correlates to a machine; first row is specifically to hold the number of missing packets being requested in this nack from a machine, the following ints in a specific column are the packet_index of missing packets

mcast_start program: 
    -process that signals the mcast processes to start
    -create sockets and connect to host server (copied code from ~cs417/tutorials/week2/mcast.c
    -multicasts a message to the server then exits


>>mcast program<<

fields:
    -num_machines: (int) the total number of processes in the server (max is 10)
    -num_packets: (int) the number of packets this process has to create and multicast
    -loss_rate: the percentage loss rate of messages in this execution
    -machine_index: the processâ€™s unique index/ID, in between 1 & num_machines 
        (our code assumes that there will be no 'odd' exceptions to the above stated rules)
    -pkt_index: (int) init to 0, tracks the amount of ~unique~ packets this process has created & sent 
    -received_pkts: (2D array of pointers to data_pkts), # of columns is set to num_machines & the rows is our window size (tbd), so every column correlates to a specific machine index & every row is a packet index
    -lio_arr: (array of ints) size n, keeps track of all the last in order packet_index for each machine that has been written/delivered, all init to 0
    -expected_pkt: (array of ints); .... all init to 1
    -acks_received: array of ints; values are pkt indices. each array index correlates to a machine & the value is the cumulative ack from that process 
    -nack_counter: array of ints; values indicate the amount of missing packets we hold from that machine (index corelates to a machine)
    -write_arr: array of ints; values are counters. holds the first packet (counter) in the top row of received_pkt; all init to 0

Start:
    -save starting input into its local fields & set initial values 
    -set up mcast socket on the specific address/server
    -wait: cannot proceed before receiving a signal from start_mcast()

    >once a start signal is received, a process will SEND a burst of packets

Transfer:
    -burst = 15 (for now)
    -while we haven't sent 15 pkts yet & we still have more to send & our window has available space to store the pkts: send a pkt
        ~while burst > 0 && pkt_index is between min_acked and min_acked+window_size && (packet_index < num_packets)
            -increment counter & pkt_index
            -create a data packet, set its fields (tag = 0, counter, packet_index, etc) & set its acks = last_in_order
            -save in received_pkts at our machine_index - 1(column), and then the correct row
            -send the packet
            -If we just sent the first packet, we should set write_arr[machine_index] = counter (which is 1)
            -when packet_index == num_packets: send our final packet
                This handles the case in which a processor sends 0 data packets -> they just need to send a final packet to inform the other processes 
            -burst--

    Listening for incoming pkts/timeout:
        case: received a pk

            switch based on tag(type of packet):
                
                case: data packet
                        - call check_store()
                        - store it in received_pkts at index [incoming packets machine_index - 1, correct row: pkt_index mod window] - 1
                        - if we can store -> check if its in order
                          comparing pkt_index to expected_num (expected_arr[machine_index-1]):
                             if pkt_index == expected_num:
                                means in order, increment the expected_num
                             if pkt_index > expected_num:
                                means a packet is missed, increment nack counter by (packet_index - excpected_num), set expected_num to packet_index + 1
                             if pkt_index < expected_num:
                                means we received a missing packet, decrement the nack counter by 1

                        - if the pkt_index is the next in order then we can attempt to write
                             - update the write array to the packet counter (if value in write_arr is one greater than the value last written -> we need to update the write arr value so we continue writing from the correct position/top row))
                             - call write_pkts()
                             - if needed, check if we can exit


                case: feedback packet
                        - check their acks for our machine and update if it is greater than our ack receieved
                        - if their ack is equal to our minimum ack then they might not have recieved anything beyond that, so reseend them our last packet

                        - check if we are able to shift our window 
                                - if the minimum ack received from all machines increases
                                - delete all packets that we have written and that have been acked

                        - check if we can write

                        - check their nacks they might be missing packets from us
                                - if the number of nacks is greater than zero, resend those packets

                
                case: final packet
                        - call check_store()
                        - store it in received_pkts at index [incoming packets machine_index - 1, correct row: pkt_index mod window] - 1
                        - if we can store -> check if its in order
                          comparing pkt_index to expected_num (expected_arr[machine_index-1]):
                             if pkt_index == expected_num:
                                means in order, increment the expected_num
                             if pkt_index > expected_num:
                                means a packet is missed, increment nack counter by (packet_index - excpected_num), set expected_num to packet_index + 1
                             if pkt_index < expected_num:
                                means we received a missing packet, decrement the nack counter by 1

                        
                        - if the pkt_index is the next in order then we can attempt to write
                                - we need to update the last in order and write array since these will be ignored in the write_pkt function

                        - call write_pkts()
                        - if needed, check if we can exit

        case: timeout
                - send a feedback packet
                - send last data packet sent

    After receiveing packets:
        check if receieved threshold has been met or timer has been exceed to send another burst and feedback packet
        

functions:

check_store():
     If we are not yet done writing for this machine
     If pkt_index is between LIO and LIO+window_size: (LIO is the last_in_order_arr[machine_index]
     If there isn't a packet in this index

write_pkts():
     this function attempts to write to the file

     first we check if we can write - based on the write arr ( call get_min_index() )
        - if there is a zero in write array --> then we don't have a packet from everyone so we can't write
        - if the value at the index returned is -1 --> then we know we have written all the packets from everyone
        - else the method returns the index with the minimum counter value (if there's two values with the same index we choose the first machine)

     While get_min_index() returns a valid index
        - we retrieve that packet from the gird and write to the file
        - if the packet written was not the machine's own packet then we can delete it from the grid

        - update the write array to the next counter value if it exists, or 0 if the packet doesn't
        
